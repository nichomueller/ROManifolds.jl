module MultiFieldCellParamFieldsTests

using FillArrays
using Gridap.Arrays
using Gridap.Geometry
using Gridap.FESpaces
using Gridap.ReferenceFEs
using Gridap.Fields
using Gridap.CellData
using Gridap.MultiField
using Gridap.TensorValues
using Mabla.FEM
using Random
using StaticArrays
using Test

Œº = Realization([[1],[2],[3]])

domain = (0,1,0,1)
cells = (2,2)
model = CartesianDiscreteModel(domain,cells)

trian = Triangulation(model)

u1(x,Œº) = sin(x[1])*(1+sum(Œº))
u1(Œº) = x -> u1(x,Œº)
u1Œº = ùëì‚Çö(u1,Œº)
cf1 = CellField(u1Œº,trian)

u2(x,Œº) = cos(x[2])*(1+sum(Œº))
u2(Œº) = x -> u2(x,Œº)
u2Œº = ùëì‚Çö(u2,Œº)
cf2 = CellField(u2Œº,trian)

cf = MultiFieldCellField([cf1,cf2])

@test cf1 === cf[1]
@test cf2 === cf[2]

_cf1, _cf2 = cf

@test cf1 === _cf1
@test cf2 === _cf2

order = 2
degree = order
quad = CellQuadrature(trian,degree)
x = get_cell_points(quad)

trian_Œì = SkeletonTriangulation(model)
quad_Œì = CellQuadrature(trian_Œì,degree)
x_Œì = get_cell_points(quad_Œì)

V = TestFESpace(model,ReferenceFE(lagrangian,VectorValue{2,Float64},order);conformity=:H1)
Q = TestFESpace(model,ReferenceFE(lagrangian,Float64,order-1),conformity=:L2)

U = TrialFESpace(V)
P = TrialFESpace(Q)

Y = MultiFieldFESpace([V,Q])
X = MultiFieldFESpace([U,P])

dv, dq = get_fe_basis(Y)
du, dp = get_trial_fe_basis(X)

n = VectorValue(1,2)

cellmat = integrate( u1Œº*(n‚ãÖdv)*dp + dq*dp, quad)
cellvec = integrate( u1Œº*(n‚ãÖdv), quad)
@test isa(cellvec[end],ArrayBlock{<:AbstractParamArray})
@test isa(cellmat[end],ArrayBlock{<:AbstractParamArray})

cellmat1 = integrate( u1Œº*((n‚ãÖdv) - dq)*((n‚ãÖdu) + dp), quad)
cellmat2 = integrate( u1Œº*(n‚ãÖdv)*(n‚ãÖdu) + u1Œº*(n‚ãÖdv)*dp - u1Œº*dq*(n‚ãÖdu) - u1Œº*dq*dp, quad)
test_array(cellmat1,cellmat2,‚âà)

cellmat1 = integrate( u1Œº*(n‚ãÖdv)*2, quad)
cellmat2 = integrate( u1Œº*(n‚ãÖdv)*fill(2,num_cells(trian)), quad)
test_array(cellmat1,cellmat2,‚âà)

Œ± = CellField(u1Œº,trian)
op2(u,‚àáu,Œ±) = Œ±*(‚àáu‚ãÖu)
cellmat1 = integrate( dv‚ãÖ(op2‚àò(du,‚àá(du),Œ±)),quad)
cellmat2 = integrate( dv‚ãÖ(Œ±*(‚àá(du)‚ãÖdu)),quad)
test_array(cellmat1,cellmat2,‚âà)

conv(u,‚àáu,Œ±) = Œ±*(u‚ãÖ‚àáu)
dconv(du,‚àádu,u,‚àáu,Œ±) = conv(u,‚àádu,Œ±)+conv(du,‚àáu,Œ±)

u = zero(U)
cellvec2 = integrate(dv‚äô(Œ±*(u‚ãÖ‚àá(u))),quad)
cellvec1 = integrate(dv‚äô(conv‚àò(u,‚àá(u),Œ±)),quad)
test_array(cellvec1,cellvec2,‚âà)

end # module
