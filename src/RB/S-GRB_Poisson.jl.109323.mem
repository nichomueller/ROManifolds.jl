        - function get_Aₙ(RBInfo::Info, RBVars::PoissonSGRB) :: Vector
        - 
        0   if isfile(joinpath(RBInfo.paths.ROM_structures_path, "Aₙ.csv"))
        0     @info "Importing reduced affine stiffness matrix"
        0     Aₙ = load_CSV(joinpath(RBInfo.paths.ROM_structures_path, "Aₙ.csv"))
        0     RBVars.Aₙ = reshape(Aₙ,RBVars.nₛᵘ,RBVars.nₛᵘ,:)
        0     RBVars.Qᵃ = size(RBVars.Aₙ)[3]
        0     return []
        -   else
        0     @info "Failed to import Aₙ: must build it"
        0     return ["A"]
        -   end
        - 
        - end
        - 
        - function assemble_affine_matrices(RBInfo::Info, RBVars::PoissonSGRB, var::String)
        - 
        0   if var == "A"
        0     RBVars.Qᵃ = 1
        0     @info "Assembling affine reduced stiffness"
        0     A = load_CSV(joinpath(RBInfo.paths.FEM_structures_path, "A.csv");
        -       convert_to_sparse = true)
        0     RBVars.Aₙ = reshape((RBVars.Φₛᵘ)'*A*RBVars.Φₛᵘ,RBVars.nₛᵘ,RBVars.nₛᵘ,1)
        -   else
        0     error("Unrecognized variable to load")
        -   end
        - 
        - end
        - 
        - function assemble_reduced_mat_MDEIM(
        -   RBVars::PoissonSGRB,
        -   MDEIM_mat::Matrix,
        -   row_idx::Vector)
        - 
        -   Q = size(MDEIM_mat)[2]
        -   r_idx, c_idx = from_vec_to_mat_idx(row_idx, RBVars.S.Nₛᵘ)
        -   MatqΦ = zeros(RBVars.S.Nₛᵘ,RBVars.S.nₛᵘ,Q)
        -   for j = 1:RBVars.S.Nₛᵘ
        -     Mat_idx = findall(x -> x == j, r_idx)
        -     MatqΦ[j,:,:] = (MDEIM_mat[Mat_idx,:]' * RBVars.S.Φₛᵘ[c_idx[Mat_idx],:])'
        -   end
        -   RBVars.S.Aₙ = reshape(RBVars.S.Φₛᵘ' *
        -     reshape(MatqΦ,RBVars.S.Nₛᵘ,:),RBVars.S.nₛᵘ,:,Q)
        -   RBVars.S.Qᵃ = Q
        - 
        - end
        - 
        - function assemble_reduced_mat_DEIM(
        -   RBVars::PoissonSTGRB,
        -   DEIM_mat::Matrix,
        -   var::String)
        - 
        -   Q = size(DEIM_mat)[2]
        -   Vecₙ = zeros(RBVars.S.nₛᵘ,1,Q)
        -   for q = 1:Q
        -     Vecₙ[:,:,q] = RBVars.S.Φₛᵘ' * Vector(DEIM_mat[:, q])
        -   end
        -   Vecₙ = reshape(Vecₙ,:,Q)
        - 
        -   if var == "F"
        -     RBVars.S.Fₙ = Vecₙ
        -     RBVars.S.Qᶠ = Q
        -   else var == "H"
        -     RBVars.S.Hₙ = Vecₙ
        -     RBVars.S.Qʰ = Q
        -   end
        - 
        - end
        - 
        - function assemble_affine_vectors(RBInfo::Info, RBVars::PoissonSGRB, var::String)
        - 
        0   if var == "F"
        0     RBVars.Qᶠ = 1
        0     @info "Assembling affine reduced forcing term"
        0     F = load_CSV(joinpath(RBInfo.paths.FEM_structures_path, "F.csv"))
        0     RBVars.Fₙ = (RBVars.Φₛᵘ)' * F
        0   elseif var == "H"
        0     RBVars.Qʰ = 1
     2720     @info "Assembling affine reduced Neumann term"
      192     H = load_CSV(joinpath(RBInfo.paths.FEM_structures_path, "H.csv"))
       16     RBVars.Hₙ = (RBVars.Φₛᵘ)' * H
        -   else
        0     error("Unrecognized variable to load")
        -   end
        - 
        - end
        - 
        - function save_affine_structures(RBInfo::Info, RBVars::PoissonSGRB)
        0   if RBInfo.save_offline_structures
        0     Aₙ = reshape(RBVars.Aₙ, :, RBVars.Qᵃ)
      208     save_CSV(Aₙ, joinpath(RBInfo.paths.ROM_structures_path, "Aₙ.csv"))
        0     if !RBInfo.build_Parametric_RHS
      208       save_CSV(RBVars.Fₙ, joinpath(RBInfo.paths.ROM_structures_path, "Fₙ.csv"))
      208       save_CSV(RBVars.Hₙ, joinpath(RBInfo.paths.ROM_structures_path, "Hₙ.csv"))
        -     end
        -   end
        - end
        - 
        - function get_Q(RBInfo::Info, RBVars::PoissonSteady)
        0   if RBVars.Qᵃ == 0
        0     RBVars.Qᵃ = size(RBVars.Aₙ)[end]
        -   end
        0   if !RBInfo.build_Parametric_RHS
        0     if RBVars.Qᶠ == 0
        0       RBVars.Qᶠ = size(RBVars.Fₙ)[end]
        -     end
        0     if RBVars.Qʰ == 0
        0       RBVars.Qʰ = size(RBVars.Hₙ)[end]
        -     end
        -   end
        - end
        - 
        - function build_Param_RHS(RBInfo::Info, RBVars::PoissonSGRB, Param, ::Array) ::Tuple
        -   F = assemble_forcing(FEMSpace, RBInfo, Param)
        -   H = assemble_neumann_datum(FEMSpace, RBInfo, Param)
        -   reshape((RBVars.Φₛᵘ)'*F,:,1), reshape((RBVars.Φₛᵘ)'*H,:,1)
        - end
        - 
        - function get_θ(RBInfo::Info, RBVars::PoissonSGRB, Param) ::Tuple
        - 
        -   θᵃ = get_θᵃ(RBInfo, RBVars, Param)
        -   if !RBInfo.build_Parametric_RHS
        -     θᶠ, θʰ = get_θᶠʰ(RBInfo, RBVars, Param)
        -   else
        -     θᶠ, θʰ = Float64[], Float64[]
        -   end
        - 
        -   return θᵃ, θᶠ, θʰ
        - 
        - end
